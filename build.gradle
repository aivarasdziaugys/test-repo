import com.github.jengelman.gradle.plugins.shadow.transformers.*
//buildscript {
//    repositories {
//        jcenter()
//    }
//    dependencies {
//        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.0'
//    }
//}
plugins {
    id "java"
    id "maven"
    id "me.champeau.gradle.jmh" version "0.4.5"
    id 'com.github.johnrengelman.plugin-shadow' version '2.0.2'
}
apply plugin: 'java'

repositories {
    jcenter()
    maven { url "http://repo.maven.apache.org/maven2" }
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}

//sourceSets{
//    perf
//}
defaultTasks "build"
dependencies {
//    perfCompile project
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter', version: '1.5.10.RELEASE') {
        exclude(module: 'commons-logging')
    }
    testCompile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '1.5.10.RELEASE') {
        exclude(module: 'commons-logging')
    }
    compile group: 'org.openjdk.jmh', name: 'jmh-core', version: '1.20'
    compileOnly group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.20'
    compile "me.champeau.gradle:jmh-gradle-plugin:0.4.5"
    compile group: 'com.carrotsearch', name: 'junit-benchmarks', version: '0.7.2'
}

task perfJar(type: Jar, dependsOn: testClasses) {
    from sourceSets.test.output + sourceSets.main.output
}

task benchmarks(dependsOn: perfJar) {
    apply plugin: 'com.github.johnrengelman.shadow'
    shadowJar {
        classifier = ''
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'

//        mergeServiceFiles()
        baseName 'shadow'
        transform(AppendingTransformer) { resource = 'reference.conf'  }
        transform(AppendingTransformer) {
            resource = 'META-INF/spring.handlers'
        }
        transform(AppendingTransformer) {
            resource = "META-INF/spring.schemas"
        }
        transform(AppendingTransformer) { resource = 'META-INF/spring.tooling'  }
        transform(PropertiesFileTransformer) { paths = ['META-INF/spring.factories' ] }
        transform(ManifestResourceTransformer) {
            mainClass = "org.openjdk.jmh.Main"
        }
        manifest {
            attributes 'Main-Class': 'org.openjdk.jmh.Main'
        }
    }
    doLast {
        shadowJar.execute()
    }
}

jmh {
    includeTests = true
}
shadowJar {
    classifier = 'benchmarks'
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'
//
    mergeServiceFiles()
////        baseName 'shadow'
    transform(AppendingTransformer) { resource = 'reference.conf'  }
    transform(AppendingTransformer) {
        resource = 'META-INF/spring.handlers'
    }
    transform(AppendingTransformer) {
        resource = "META-INF/spring.schemas"
    }
    transform(AppendingTransformer) { resource = 'META-INF/spring.tooling'  }
    transform(PropertiesFileTransformer) { paths = ['META-INF/spring.factories' ] }
    transform(ManifestResourceTransformer) {
        mainClass = "org.openjdk.jmh.Main"
    }
}

//jmhJar {
//    append('META-INF/spring.handlers')
//    append('META-INF/spring.schemas')
//    exclude 'LICENSE'
//}

//shadowJar{
//    baseName "shadow"
//    classifier null
//    version null
//}

group = 'com.example'
version = 'v1'

description = """demo"""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
