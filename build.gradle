import com.github.jengelman.gradle.plugins.shadow.transformers.*
plugins {
    id "java"
    id "maven"
    id "me.champeau.gradle.jmh" version "0.4.5"
    id 'com.github.johnrengelman.plugin-shadow' version '2.0.2'
}
apply plugin: 'java'

repositories {
    jcenter()
    maven { url "http://repo.maven.apache.org/maven2" }
    maven {
        url "https://plugins.gradle.org/m2/"
    }
}
sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['src']
        }
    }
    test {
        java {
            srcDirs = ['test']
        }
        resources {
            srcDirs = ['test']
        }
    }
}
defaultTasks "build"
dependencies {
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter', version: '1.5.10.RELEASE') {
        exclude(module: 'commons-logging')
    }
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: '1.5.10.RELEASE') {
        exclude(module: 'commons-logging')
    }
    compile group: 'org.openjdk.jmh', name: 'jmh-core', version: '1.20'
    compileOnly group: 'org.openjdk.jmh', name: 'jmh-generator-annprocess', version: '1.20'
    compile "me.champeau.gradle:jmh-gradle-plugin:0.4.5"
    compile group: 'com.carrotsearch', name: 'junit-benchmarks', version: '0.7.2'
    // https://mvnrepository.com/artifact/junit/junit
    compile group: 'junit', name: 'junit', version: '4.12'

}

//should add sources from main and test to jar.
task perfJar(type: Jar, dependsOn: testClasses) {
//    from sourceSets.main.output
    from sourceSets.test.output + sourceSets.main.output
}

//should shadow another jar with benchmark test config.
task benchmarks(dependsOn: perfJar) {
    apply plugin: 'com.github.johnrengelman.shadow'
    shadowJar {
        classifier = ''
        baseName 'shadow'

        manifest {
            attributes 'Main-Class': 'org.openjdk.jmh.Main'
        }
        exclude 'META-INF/*.SF'
        exclude 'META-INF/*.DSA'
        exclude 'META-INF/*.RSA'

        mergeServiceFiles()
        transform(AppendingTransformer) { resource = 'reference.conf'  }
        transform(AppendingTransformer) {
            resource = 'META-INF/spring.handlers'
        }
        transform(AppendingTransformer) {
            resource = "META-INF/spring.schemas"
        }
        transform(AppendingTransformer) { resource = 'META-INF/spring.tooling'  }
        transform(PropertiesFileTransformer) { paths = ['META-INF/spring.factories' ] }
    }
    doLast {
        shadowJar.execute()
    }
}

group = 'com.example'
version = ''

description = """demo"""

sourceCompatibility = 1.8
targetCompatibility = 1.8
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}
